import random
from functools import wraps
from typing import Callable, List, Dict, Any

def stats_decorator(*operations: str) -> Callable:
    """
    带参数的装饰器，用于对随机样本生成函数进行统计操作
    
    参数:
        operations: 统计操作列表，可选 'SUM', 'AVG', 'MAX', 'MIN'
    """
    def decorator(func: Callable) -> Callable:
        @wraps(func)
        def wrapper(*args, **kwargs) -> Dict[str, Any]:
            # 调用原始函数生成随机样本
            samples = func(*args, **kwargs)
            
            # 初始化结果字典
            result = {
                'samples': samples,
                'stats': {}
            }
            
            # 执行请求的统计操作
            for op in operations:
                op_upper = op.upper()
                if op_upper == 'SUM':
                    result['stats']['sum'] = sum(samples)
                elif op_upper == 'AVG':
                    result['stats']['avg'] = sum(samples) / len(samples)
                elif op_upper == 'MAX':
                    result['stats']['max'] = max(samples)
                elif op_upper == 'MIN':
                    result['stats']['min'] = min(samples)
                else:
                    raise ValueError(f"不支持的统计操作: {op}")
            
            return result
        return wrapper
    return decorator


# 示例使用
@stats_decorator('SUM', 'AVG', 'MAX', 'MIN')
def generate_random_samples(count: int = 10, lower: int = 1, upper: int = 100) -> List[int]:
    """生成随机整数样本"""
    return [random.randint(lower, upper) for _ in range(count)]


# 测试代码
if __name__ == "__main__":
    # 生成随机样本并计算所有统计量
    result = generate_random_samples(5)
    print("生成的随机样本:", result['samples'])
    print("统计结果:")
    for stat, value in result['stats'].items():
        print(f"{stat}: {value}")
    
    print("\n只计算平均值和最大值:")
    
    @stats_decorator('AVG', 'MAX')
    def generate_samples_special():
        return generate_random_samples(5)['samples']
    
    special_result = generate_samples_special()
    print("生成的随机样本:", special_result['samples'])
    print("统计结果:")
    for stat, value in special_result['stats'].items():
        print(f"{stat}: {value}")
