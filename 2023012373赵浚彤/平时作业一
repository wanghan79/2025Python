"""
2023012373赵浚彤
2025春季学期python&操作系统
平时作业1
"""
def banker_algorithm(available, max_res, allocated, request, process_num=None):
    """
    银行家算法实现

    参数:
        available: 可用资源向量，例如 [3, 3, 2]
        max_res: 最大需求矩阵，例如 [[7,5,3],[3,2,2],[9,0,2],[2,2,2],[4,3,3]]
        allocated: 已分配矩阵，例如 [[0,1,0],[2,0,0],[3,0,2],[2,1,1],[0,0,2]]
        request: 请求向量，包含进程号和请求资源，例如 (1, [1,0,2])
        process_num: 可选，如果request不包含进程号，则需要指定

    返回:
        (是否安全, 安全序列, 新的available, 新的allocated, 新的need)
    """
    # 转换输入为列表形式
    available = list(available)
    max_res = [list(row) for row in max_res]
    allocated = [list(row) for row in allocated]

    # 解析请求
    if isinstance(request, tuple) and len(request) == 2:
        process_num, request = request
    elif process_num is None:
        raise ValueError("必须指定进程号，要么在request中，要么通过process_num参数")

    request = list(request)
    n_processes = len(max_res)
    n_resources = len(available)

    # 计算need矩阵
    need = []
    for i in range(n_processes):
        need.append([max_res[i][j] - allocated[i][j] for j in range(n_resources)])

    print("\n初始状态:")
    print("Max:", max_res)
    print("Allocated:", allocated)
    print("Need:", need)
    print("Available:", available)
    print(f"\n进程 P{process_num} 请求资源:", request)

    # 步骤1: 检查请求是否小于等于need
    for j in range(n_resources):
        if request[j] > need[process_num][j]:
            print(f"错误: 进程 P{process_num} 请求的资源超过其宣布的最大需求")
            return False, None, available, allocated, need

    # 步骤2: 检查请求是否小于等于available
    for j in range(n_resources):
        if request[j] > available[j]:
            print(f"错误: 进程 P{process_num} 请求的资源超过系统可用资源")
            return False, None, available, allocated, need

    # 步骤3: 尝试分配
    print("\n尝试分配资源...")
    new_available = available.copy()
    new_allocated = [row.copy() for row in allocated]
    new_need = [row.copy() for row in need]

    for j in range(n_resources):
        new_available[j] -= request[j]
        new_allocated[process_num][j] += request[j]
        new_need[process_num][j] -= request[j]

    print("分配后状态:")
    print("Allocated:", new_allocated)
    print("Need:", new_need)
    print("Available:", new_available)

    # 步骤4: 安全检查
    print("\n执行安全检查...")
    work = new_available.copy()
    finish = [False] * n_processes
    safe_sequence = []

    while True:
        found = False
        for i in range(n_processes):
            if not finish[i] and all(new_need[i][j] <= work[j] for j in range(n_resources)):
                print(f"P{i} 可以执行，释放资源: {new_allocated[i]}")
                for j in range(n_resources):
                    work[j] += new_allocated[i][j]
                finish[i] = True
                safe_sequence.append(i)
                found = True
                break

        if not found:
            break

    if all(finish):
        print("\n系统处于安全状态，安全序列:", safe_sequence)
        return True, safe_sequence, new_available, new_allocated, new_need
    else:
        print("\n系统将进入不安全状态，拒绝分配")
        # 恢复原始状态
        return False, None, available, allocated, need


# 示例使用
if __name__ == "__main__":
    # 示例数据
    available = [3, 3, 2]
    max_res = [
        [7, 5, 3],
        [3, 2, 2],
        [9, 0, 2],
        [2, 2, 2],
        [4, 3, 3]
    ]
    allocated = [
        [0, 1, 0],
        [2, 0, 0],
        [3, 0, 2],
        [2, 1, 1],
        [0, 0, 2]
    ]

    # 测试1: 进程1请求[1,0,2] - 应该成功
    print("测试1: 进程1请求[1,0,2]")
    result = banker_algorithm(available, max_res, allocated, (1, [1, 0, 2]))
    print("\n结果:", result[0], "安全序列:", result[1])

    # 测试2: 进程4请求[3,3,0] - 应该失败(超过available)
    print("\n\n测试2: 进程4请求[3,3,0]")
    result = banker_algorithm(available, max_res, allocated, (4, [3, 3, 0]))
    print("\n结果:", result[0], "安全序列:", result[1])

    # 测试3: 进程0请求[0,2,0] - 应该失败(会导致不安全状态)
    print("\n\n测试3: 进程0请求[0,2,0]")
    result = banker_algorithm(available, max_res, allocated, (0, [0, 2, 0]))
    print("\n结果:", result[0], "安全序列:", result[1])
