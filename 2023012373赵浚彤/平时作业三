"""
2023012373赵浚彤
2025春季学期python
平时作业3：
使用带参修饰器实现对随机样本生成函数的统计操作修饰，能够实现sum，avg
，max，min四种统计操作的任意组合进行统计结果输出
"""
import random

# 定义样本生成函数
def create_string(config):
    """从指定字符串中随机生成指定长度的字符串"""
    return ''.join(random.choices(config['datarange'], k=config['len']))

def create_integer(config):
    """从随机数范围中生成随机整数"""
    return random.randint(config['datarange'][0], config['datarange'][1])

def create_float(config):
    """从随机数范围中生成随机浮点数"""
    return random.uniform(config['datarange'][0], config['datarange'][1])

def create_list(config):
    """生成列表"""
    return [generate_random_sample({k: v}) for k, v in config.items()]

def create_dict(config):
    """生成字典"""
    return {k: generate_random_sample({k: v}) for k, v in config.items()}

def create_tuple(config):
    """生成元组"""
    return tuple(generate_random_sample({k: v}) for k, v in config.items())

# 建立类型到生成函数的映射
TYPE_GENERATOR_MAP = {
    'str': create_string,
    'int': create_integer,
    'float': create_float,
    'list': create_list,
    'dict': create_dict,
    'tuple': create_tuple,
}

def extract_integer_values(data):
    """仅提取生成数据中的整数值"""
    integers = []
    if isinstance(data, (list, tuple, set)):
        for element in data:
            integers.extend(extract_integer_values(element))
    elif isinstance(data, dict):
        for _, value in data.items():
            integers.extend(extract_integer_values(value))
    elif isinstance(data, int):  # 只保留整数类型，忽略浮点数
        integers.append(data)
    return integers

def StatisticsDecorator(**options):
    """装饰器函数，仅对整数进行统计"""
    def inner_decorator(func):
        def wrapper(*args, **kwargs):
            stats_methods = options.get('methods', [])
            samples = []
            for sample in func(*args, **kwargs):
                print(sample)
                samples.append(sample)
            if not samples:
                return None

            # 仅提取整数
            all_integers = []
            for sample in samples:
                all_integers.extend(extract_integer_values(sample))

            if not all_integers:
                return None

            # 计算统计数据（仅针对整数）
            results = []
            for method in stats_methods:
                if method == 'SUM':
                    results.append(('SUM', sum(all_integers)))
                elif method == 'AVG':
                    results.append(('AVG', sum(all_integers) / len(all_integers)))
                elif method == 'MAX':
                    results.append(('MAX', max(all_integers)))
                elif method == 'MIN':
                    results.append(('MIN', min(all_integers)))
                else:
                    raise ValueError("Unsupported statistics method")
            return results
        return wrapper
    return inner_decorator

def generate_random_sample(structure):
    """生成指定结构配置的随机样本"""
    if len(structure) != 1:
        raise ValueError(f"结构配置必须包含且仅包含一个类型键：{structure}")
    type_key, config = next(iter(structure.items()))
    if type_key not in TYPE_GENERATOR_MAP:
        raise ValueError(f"不支持的类型：'{type_key}'")
    return TYPE_GENERATOR_MAP[type_key](config)

@StatisticsDecorator(methods=['SUM', 'AVG', 'MAX', 'MIN'])
def sample_generator(**kwargs):
    """随机数生成器"""
    num_samples = kwargs.pop('number', 1)
    for _ in range(num_samples):
        yield generate_random_sample(kwargs)

if __name__ == '__main__':
    example_config = {
        'number': 5,
        'tuple': {
            'str': {
                'datarange': 'abcdefghijklmnopqrstuvwxyz',
                'len': 8
            },
            'list': {
                'int': {
                    'datarange': [1, 100]
                },
                'float': {
                    'datarange': [1, 100]  # 仍生成浮点数，但不会被统计
                }
            },
            'dict': {
                'int': {
                    'datarange': [1, 100]
                }
            }
        }
    }

    stats_results = sample_generator(**example_config)
    for stat_method, value in stats_results:
        print(f"The {stat_method} of integers: {value}")
