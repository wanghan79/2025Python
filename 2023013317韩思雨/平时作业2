import random
import string
from datetime import datetime, timedelta
from typing import Any, Union, Type

DEFAULT_CONFIG = {
    int: {"datarange": (0, 100)},
    float: {"datarange": (0.0, 1.0)},
    str: {"datarange": string.ascii_letters, "len": 8},
    list: {"length": 3},
    tuple: {"length": 2},
    dict: {"num": 1},
    "date": {"start": "2000-01-01", "end": "2023-12-31"}
}


class DataGenerator:
    def __init__(self, test_struct: dict):
        """
        初始化数据生成器
        :param test_struct: 数据结构定义字典
        """
        self.test_struct = test_struct
        self.type_handlers = {
            int: self._gen_int,
            float: self._gen_float,
            str: self._gen_str,
            list: self._gen_list,
            tuple: self._gen_tuple,
            dict: self._gen_dict,
            "date": self._gen_date
        }

    def generate(self, num: int = 1) -> list[dict]:
        """生成指定数量的数据组"""
        return [self._generate_group(self.test_struct) for _ in range(num)]

    def _generate_group(self, config: dict) -> dict:
        """生成单组数据"""
        return {key: self._generate_value(field_cfg)
                for key, field_cfg in config.items()}

    def _generate_value(self, config: Union[Type, dict]) -> Any:
        """智能生成单个数据"""
        # 统一配置格式
        if isinstance(config, type):
            cfg = {"type": config}
        else:
            cfg = config.copy()

        data_type = cfg.get("type", int)
        handler = self.type_handlers.get(data_type)
        if not handler:
            raise ValueError(f"Unsupported data type: {data_type}")

        # 合并默认配置
        default_cfg = DEFAULT_CONFIG.get(data_type, {})
        merged_cfg = {**default_cfg, **cfg}
        return handler(merged_cfg)

    def _gen_int(self, config: dict) -> int:
        """生成整数"""
        return random.randint(*config["datarange"])

    def _gen_float(self, config: dict) -> float:
        """生成浮点数"""
        return random.uniform(*config["datarange"])

    def _gen_str(self, config: dict) -> str:
        """生成字符串"""
        return ''.join(random.choices(
            config["datarange"],
            k=config["len"]
        ))

    def _gen_list(self, config: dict) -> list:
        """生成列表"""
        return [self._generate_value(config.get("items", int))
                for _ in range(config["length"])]

    def _gen_tuple(self, config: dict) -> tuple:
        """生成元组"""
        return tuple(self._gen_list(config))

    def _gen_dict(self, config: dict) -> list[dict]:
        """生成字典结构"""
        return [self._generate_group(config.get("fields", {}))
                for _ in range(config["num"])]

    def _gen_date(self, config: dict) -> str:
        """生成日期字符串"""
        start = datetime.strptime(config["start"], "%Y-%m-%d")
        end = datetime.strptime(config["end"], "%Y-%m-%d")
        delta = end - start
        random_days = random.randint(0, delta.days)
        return (start + timedelta(days=random_days)).strftime("%Y-%m-%d")


# 使用示例
if __name__ == "__main__":
    # 定义测试数据结构
    test_struct = {
        "user_id": {"type": int, "datarange": (1000, 9999)},
        "profile": {
            "type": dict,
            "fields": {
                "name": {"type": str, "len": 5},
                "birthday": {"type": "date"},
                "scores": {
                    "type": list,
                    "length": 3,
                    "items": {"type": float, "datarange": (0.0, 100.0)}
                }
            }
        },
        "locations": {
            "type": tuple,
            "length": 2,
            "items": {
                "type": dict,
                "fields": {
                    "city": {"type": str, "datarange": ["Beijing", "Shanghai"]},
                    "coordinates": {
                        "type": tuple,
                        "length": 2,
                        "items": {"type": float, "datarange": (-90.0, 90.0)}
                    }
                }
            }
        }
    }

    # 初始化生成器
    generator = DataGenerator(test_struct)

    # 生成3组数据
    data = generator.generate(3)

    # 打印结果
    for i, group in enumerate(data):
        print(f"Group {i + 1}:")
        print(group)
        print("-" * 50)
